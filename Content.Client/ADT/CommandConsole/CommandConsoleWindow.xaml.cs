using Content.Client.UserInterface.Controls;
using Content.Shared.ADT.CommandConsole;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using System.Text;
using System.Linq;
using Content.Client.Administration.Systems;
using Content.Shared.Administration;
using Content.Shared.CCVar;
using Robust.Client.Graphics;
using Robust.Client.Input;
using System;
using System.Collections;
using JetBrains.Annotations;
using Robust.Shared.Asynchronous;
using Robust.Shared.Audio;
using Robust.Shared.Audio.Midi;
using Robust.Shared.Audio.Sources;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Log;
using Robust.Shared.Map;
using Robust.Shared.Maths;
using Robust.Shared.ViewVariables;
using Robust.Shared.Input;
using System.Reflection;
using System.Threading.Tasks;

namespace Content.Client.ADT.CommandConsole
{
    [GenerateTypedNameReferences]
    public sealed partial class CommandConsoleWindow : FancyWindow
    {
        [Dependency] private readonly IInputManager _inputManager = default!;
        private readonly CommandManager _commandManager = new();
        private EntityUid? _owner;
        private readonly IEntityManager _entMan;
        private CommandConsoleBoundUserInterface? _userInterface;

        public CommandConsoleWindow(CommandConsoleBoundUserInterface userInterface, EntityUid? owner)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _entMan = IoCManager.Resolve<IEntityManager>();
            _owner = owner;
            _userInterface = userInterface;

            ExecuteButton.OnPressed += _ =>
            {
                var input = Rope.Collapse(CommandInput.TextRope);
                SaveProgress();

                var output = ProcessCommands(input);

                var currentOutput = OutputLabel.Text;
                OutputLabel.Text = currentOutput + output + "\n";

                UpdateComponentState();

                CommandInput.TextRope = new Rope.Leaf("");
                CommandInput.CursorPosition = new TextEdit.CursorPos(0, TextEdit.LineBreakBias.Top);
            };

            // // Обработка нажатия Enter в CommandInput
            CommandInput.OnKeyBindDown += args =>
            {
                if (args.Function == EngineKeyFunctions.TextNewline)
                {
                    var input = Rope.Collapse(CommandInput.TextRope);
                    SaveProgress();

                    var output = ProcessCommands(input);

                    var currentOutput = OutputLabel.Text;
                    OutputLabel.Text = currentOutput + output + "\n";

                    UpdateComponentState();

                    CommandInput.TextRope = new Rope.Leaf("");
                    CommandInput.CursorPosition = new TextEdit.CursorPos(0, TextEdit.LineBreakBias.Top);

                    args.Handle();
                }
            };

            // Обработка F1 для справки
            // _inputManager.KeyBindStateChanged += args =>
            // {
            //     if (args.Key == Keyboard.Key.F1 && args.State == BoundKeyState.Down)
            //     {
            //         ShowHelp();
            //     }
            // };

            CommandInput.Placeholder = new Rope.Leaf("Enter command...");
        }

        private string ProcessCommands(string input)
        {
            var lines = input.Split('\n');
            string result = "";

            foreach (var line in lines)
            {
                var trimmed = line.Trim();

                if (string.IsNullOrEmpty(trimmed))
                {
                    result += $"{_commandManager.CurrentPath}> \n";
                    continue;
                }

                // Отправляем команду на сервер
                var message = new CommandConsoleExecuteMessage(trimmed);
                _userInterface?.SendMessage(message);

                // Показываем команду в выводе
                result += $"{_commandManager.CurrentPath}> {trimmed}\n";

                // Временный вывод (будет заменен ответом сервера)
                result += "Processing command on server...\n";

                if (_commandManager.ExitRequested)
                {
                    Close();
                    break;
                }
            }

            return result;
        }

        protected override void Opened()
        {
            base.Opened();
            LoadProgress();

            // ASCII приветствие
            var firstContent =
@"╔══════════════════════════════════════════════════════════════╗
║                NANOTRASEN COMMAND CONSOLE v1.42              ║
║                                                              ║
║  (c) 2562 Nanotrasen Systems. All Rights Reserved.          ║
║                                                              ║
║  Initializing secure terminal session...                    ║
║  Station: NSS Exodus                                         ║
║  Security clearance level: GENERAL ACCESS                   ║
║                                                              ║
║  [ OK ] System Kernel Loaded                                 ║
║  [ OK ] Virtual File System Initialized                     ║
║  [ OK ] Networking Stack Initialized                        ║
║  [ OK ] Security Module Active                              ║
║  [ OK ] User Session Created                                ║
║                                                              ║
║  > Type 'help' to get started.                              ║
╚══════════════════════════════════════════════════════════════╝";

            var formatted = new FormattedMessage();
            formatted.AddText(firstContent + "\n");
            OutputLabel.SetMessage(formatted);

            UpdateComponentState();

            // Запускаем анимацию индикаторов
            StartResourceAnimation();
        }

        // private void StartResourceAnimation()
        // {
        //     // Анимация индикаторов ресурсов
        //     _taskManager.RunOnMainThread(async () =>
        //     {
        //         while (IsOpen)
        //         {
        //             await Task.Delay(2000); // Обновляем каждые 2 секунды

        //             // Здесь можно добавить обновление индикаторов ресурсов
        //             // Например, изменение процентов CPU, RAM, HDD
        //         }
        //     });
        // }

        private void StartResourceAnimation()
        {
            // Анимация индикаторов ресурсов
            // TODO: Implement resource animation when needed
            // For now, this is a placeholder
        }

        public override void Close()
        {
            SaveProgress();
            base.Close();
        }

        public void HandleStateUpdate(CommandConsoleState state)
        {
            _commandManager.SetState(state.RootDirectory, state.CurrentPath);

            if (!string.IsNullOrEmpty(state.Input))
            {
                CommandInput.TextRope = new Rope.Leaf(state.Input);
            }
        }

        public void HandleExecuteResponse(CommandConsoleExecuteResponseMessage response)
        {
            if (response.Success)
            {
                var currentOutput = OutputLabel.Text;
                OutputLabel.Text = currentOutput + response.Output + "\n";
            }
        }

        private void SaveProgress()
        {
            if (_owner != null)
            {
                var message = new CommandConsoleSaveStateMessage(
                    _commandManager.GetRootDirectory(),
                    _commandManager.CurrentPath,
                    Rope.Collapse(CommandInput.TextRope)
                );

                _userInterface?.SendMessage(message);
            }
        }

        private void UpdateComponentState()
        {
            if (_owner != null && _entMan.TryGetComponent(_owner.Value, out CommandConsoleComponent? comp))
            {
                // Обновляем путь из менеджера команд
                comp.CurrentPath = _commandManager.CurrentPath;
            }
        }

        private void LoadProgress()
        {
            if (_owner != null)
            {
                var message = new CommandConsoleLoadStateMessage();
                _userInterface?.SendMessage(message);
            }
        }

        private void ShowHelp()
        {
            var helpText = @"
╔══════════════════════════════════════════════════════════════╗
║                    COMMAND CONSOLE HELP                      ║
╠══════════════════════════════════════════════════════════════╣
║                                                              ║
║  BASIC COMMANDS:                                             ║
║    help          - Show this help message                   ║
║    ls            - List directory contents                   ║
║    cd <dir>      - Change directory                          ║
║    pwd           - Print working directory                   ║
║    cat <file>    - Display file contents                     ║
║    mkdir <dir>   - Create directory                          ║
║    touch <file>  - Create empty file                         ║
║    write <file> <content> - Write to file                    ║
║    rm [-r] <name> - Remove file/directory                    ║
║    echo <text>   - Echo text                                 ║
║    time          - Show current time                         ║
║    clear         - Clear console                             ║
║    exit          - Exit console                              ║
║                                                              ║
║  GAMES:                                                      ║
║    run_rogue     - Start Rogue game                          ║
║    snake         - Start Snake game                          ║
║                                                              ║
║  SCRIPTS:                                                    ║
║    run <script.sh> - Execute shell script                   ║
║                                                              ║
║  SHORTCUTS:                                                  ║
║    F1           - Show this help                             ║
║    Enter        - Execute command                            ║
║                                                              ║
╚══════════════════════════════════════════════════════════════╝";

            var currentOutput = OutputLabel.Text;
            OutputLabel.Text = currentOutput + helpText + "\n";
        }

        // Изначальная файловая система. TODO:
        // Перенести бы в компонент,
        // чтобы можно было хадать свою файловую систему в прототипе
        private void InitializeFileSystem(Directory root)
        {
            var etc = new Directory { Name = "etc" };
            var home = new Directory { Name = "home" };
            var usr = new Directory { Name = "usr" };
            var varDir = new Directory { Name = "var" };
            var bin = new Directory { Name = "bin" };
            var lib = new Directory { Name = "lib" };
            var tmp = new Directory { Name = "tmp" };
            var dev = new Directory { Name = "dev" };
            var proc = new Directory { Name = "proc" };

            // Файлы в /etc
            var passwd = new File
            {
                Name = "passwd.txt",
                Content =
                @"root:x:0:0:root:/root:/bin/bash
                user:x:1000:1000:User,,,:/home/user:/bin/bash"
            };
            var hosts = new File
            {
                Name = "hosts.txt",
                Content =
                @"127.0.0.1   localhost
                ::1         localhost
                192.168.1.10  mymachine.local"
            };

            // Папка и файлы в /home
            var userDir = new Directory { Name = "user" };
            var readmeUser = new File { Name = "readme.txt", Content = "Welcome to your home directory, user!" };
            var notes = new File { Name = "notes.txt", Content = "Don't forget to check your mail." };
            userDir.Add(readmeUser);
            userDir.Add(notes);

            // Папки и файлы в /usr
            var binUsr = new Directory { Name = "bin" };
            var libUsr = new Directory { Name = "lib" };
            var local = new Directory { Name = "local" };
            var localBin = new Directory { Name = "bin" };
            var localReadme = new File { Name = "README.txt", Content = "Local user-installed software directory." };
            localBin.Add(new File { Name = "myapp.elf", Content = "Executable binary placeholder" });
            local.Add(localBin);
            local.Add(localReadme);

            binUsr.Add(new File { Name = "bash.elf", Content = "Bash shell executable placeholder" });
            binUsr.Add(new File { Name = "ls.elf", Content = "List directory contents executable placeholder" });
            libUsr.Add(new File { Name = "libc.so", Content = "Standard C library placeholder" });

            usr.Add(binUsr);
            usr.Add(libUsr);
            usr.Add(local);

            // Файлы в /var
            var log = new Directory { Name = "log" };
            var syslog = new File { Name = "syslog.log", Content = "[INFO] System started\n[WARNING] Low disk space\n" };
            log.Add(syslog);
            var spool = new Directory { Name = "spool" };

            varDir.Add(log);
            varDir.Add(spool);

            // Файлы в /bin
            bin.Add(new File { Name = "cat.elf", Content = "Concatenate files executable placeholder" });
            bin.Add(new File { Name = "echo.elf", Content = "Echo arguments executable placeholder" });
            bin.Add(new File { Name = "mkdir.elf", Content = "Make directories executable placeholder" });

            // /lib — библиотеки
            lib.Add(new File { Name = "libm.so", Content = "Math library placeholder" });
            lib.Add(new File { Name = "libpthread.so", Content = "POSIX threads library placeholder" });

            // /tmp — временные файлы (пусто)

            // /dev — устройства (пусто, обычно специальные файлы)

            // /proc — виртуальная файловая система (пусто)

            // Файл в корне
            var motd = new File { Name = "motd.elf", Content = "Welcome to Mini Command Console OS!\nHave a nice day!" };

            root.Add(etc);
            root.Add(home);
            root.Add(usr);
            root.Add(varDir);
            root.Add(bin);
            root.Add(lib);
            root.Add(tmp);
            root.Add(dev);
            root.Add(proc);
            root.Add(motd);

            home.Add(userDir);
        }
    }
}
